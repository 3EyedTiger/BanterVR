Shader "Custom/LuminescentPoolWater"
{
    Properties
    {
        _MainTex ("Water Texture", 2D) = "white" {}
        _NormalMap ("Normal Map", 2D) = "bump" {}
        _Color ("Water Color", Color) = (0.0, 0.5, 1.0, 1.0)
        _GlowColor ("Glow Color", Color) = (0.1, 0.5, 1.0, 1.0)
        _WaveSpeed ("Wave Speed", Float) = 1.0
        _WaveStrength ("Wave Strength", Float) = 0.2
        _FresnelPower ("Fresnel Power", Float) = 3.0
        _ReflectColor ("Reflection Color", Color) = (0.5, 0.5, 0.5, 0.5)
        _EmissionStrength ("Emission Strength", Float) = 1.0
    }
    SubShader
    {
        Tags { "Queue"="Transparent" "RenderType"="Transparent" }
        LOD 200

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #pragma multi_compile_fog
            #include "UnityCG.cginc"

            sampler2D _MainTex;
            sampler2D _NormalMap;
            float4 _MainTex_ST;
            float4 _Color;
            float4 _GlowColor;
            float _WaveSpeed;
            float _WaveStrength;
            float _FresnelPower;
            float4 _ReflectColor;
            float _EmissionStrength;
            float _Time;

            struct appdata
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float3 worldPos : TEXCOORD1;
                float3 worldNormal : TEXCOORD2;
                float3 viewDir : TEXCOORD3;
            };

            v2f vert(appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                o.worldNormal = mul((float3x3)unity_ObjectToWorld, v.normal);
                o.viewDir = normalize(_WorldSpaceCameraPos - o.worldPos);
                return o;
            }

            float4 frag(v2f i) : SV_Target
            {
                // Sample the water texture
                float4 texColor = tex2D(_MainTex, i.uv);

                // Animated normal map for ripples
                float2 waveOffset = float2(_Time * _WaveSpeed, _Time * _WaveSpeed * 0.5);
                float2 normalUV = i.uv + waveOffset;
                float3 normalTex = UnpackNormal(tex2D(_NormalMap, normalUV));
                float3 distortedNormal = normalize(normalTex * _WaveStrength + i.worldNormal);

                // Fresnel effect
                float fresnel = pow(1.0 - saturate(dot(i.viewDir, distortedNormal)), _FresnelPower);

                // Reflection simulation (can also use reflection probes or cubemaps)
                float4 reflectionColor = _ReflectColor * fresnel;

                // Combine water color with reflections
                float4 waterColor = _Color * texColor + reflectionColor;

                // Emission for glow (luminescence)
                float4 emission = _GlowColor * _EmissionStrength;

                // Apply transparency based on Fresnel and glow
                float4 finalColor = waterColor + emission * fresnel;
                finalColor.a = saturate(fresnel + _EmissionStrength);

                return finalColor;
            }
            ENDCG
        }
    }
    FallBack "Transparent/Diffuse"
}
