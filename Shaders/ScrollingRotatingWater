Shader "Custom/ScrollingRotatingWater"
{
    Properties
    {
        _MainTex ("Water Texture", 2D) = "white" {}
        _Speed ("Scroll Speed", Float) = 0.5
        _RotationSpeed ("Rotation Speed", Float) = 0.1
        _DistortionStrength ("Distortion Strength", Float) = 0.1
        _DistortionFrequency ("Distortion Frequency", Float) = 5.0
        _Transparency ("Transparency", Range(0,1)) = 0.5
    }
    SubShader
    {
        Tags { "RenderType" = "Transparent" "Queue" = "Transparent" }
        LOD 200
        
        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            sampler2D _MainTex;
            float4 _MainTex_ST;
            float _Speed;
            float _RotationSpeed;
            float _DistortionStrength;
            float _DistortionFrequency;
            float _Transparency;
            float _Time;

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            // Vertex shader
            v2f vert (appdata v)
            {
                v2f o;

                // Pass the vertex position to the fragment shader
                o.vertex = UnityObjectToClipPos(v.vertex);

                // Scroll UVs in both X and Y directions
                float2 uv = v.uv;
                uv.x += sin(_Time * _Speed) * 0.5; // Backward and forward scrolling on X axis
                uv.y += cos(_Time * _Speed) * 0.5; // Backward and forward scrolling on Y axis

                // Apply rotation to the UV coordinates
                float angle = _Time * _RotationSpeed;
                float s = sin(angle);
                float c = cos(angle);

                float2 rotatedUV;
                rotatedUV.x = c * uv.x - s * uv.y;
                rotatedUV.y = s * uv.x + c * uv.y;

                // Apply distortion to UV coordinates
                float distortion = sin(uv.x * _DistortionFrequency + _Time) * _DistortionStrength;
                rotatedUV += distortion;

                o.uv = rotatedUV;

                return o;
            }

            // Fragment shader
            fixed4 frag (v2f i) : SV_Target
            {
                // Sample the water texture
                fixed4 texColor = tex2D(_MainTex, i.uv);

                // Apply transparency to the water texture
                texColor.a *= _Transparency;

                return texColor;
            }
            ENDCG
        }
    }
    FallBack "Transparent/Diffuse"
}
